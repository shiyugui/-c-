#include <iostream>
#include <conio.h>
#include <vector>
#include <windows.h>
#include <ctime>

using namespace std;
using std::cout; // 添加这行代码

// 游戏区域的宽度和高度
const int WIDTH = 20;
const int HEIGHT = 20;

// 游戏元素的字符表示
const char EMPTY = ' ';
const char SNAKE = 'O';
const char FOOD = '*';

// 方向枚举
enum Direction { STOP = 0, LEFT, RIGHT, UP, DOWN };

// 位置结构体
struct Position {
    int x, y;
};

class SnakeGame {
public:
    vector<Position> snake; // 蛇的身体位置
    Position food; // 食物位置
    Direction dir; // 当前方向
    bool gameOver; // 游戏结束标志
    bool paused; // 游戏暂停标志
    int score; // 游戏得分
    int level; // 游戏等级

    // 初始化食物位置
    void SetupFood() {
        food.x = rand() % WIDTH;
        food.y = rand() % HEIGHT;

        // 确保食物不在蛇身上
        for (const auto& pos : snake) {
            if (pos.x == food.x && pos.y == food.y) {
                SetupFood(); // 递归确保食物位置有效
                break;
            }
        }
    }

    // 检查是否发生碰撞
    bool IsCollision(Position head) {
        // 检查是否撞墙
        if (head.x >= WIDTH || head.x < 0 || head.y >= HEIGHT || head.y < 0)
            return true;

        // 检查是否撞到自己
        for (size_t i = 1; i < snake.size(); i++) {
            if (snake[i].x == head.x && snake[i].y == head.y)
                return true;
        }

        return false;
    }

public:
    // 构造函数，初始化游戏状态
    SnakeGame() : dir(STOP), gameOver(false), paused(false), score(0), level(1) {
        snake.push_back({ WIDTH / 2, HEIGHT / 2 }); // 初始化蛇头位置
        SetupFood(); // 初始化食物位置
    }

    // 改变蛇的方向
    void ChangeDirection(Direction newDir) {
        // 禁止反向移动
        if ((dir == LEFT && newDir == RIGHT) || (dir == RIGHT && newDir == LEFT) ||
            (dir == UP && newDir == DOWN) || (dir == DOWN && newDir == UP))
            return;

        dir = newDir;
    }

    // 移动蛇
    void Move() {
        Position head = snake[0];
        Position newHead;

        // 根据当前方向计算新头部位置
        switch (dir) {
        case LEFT: newHead = { head.x - 1, head.y }; break;
        case RIGHT: newHead = { head.x + 1, head.y }; break;
        case UP: newHead = { head.x, head.y - 1 }; break;
        case DOWN: newHead = { head.x, head.y + 1 }; break;
        default: return;
        }

        // 检查是否发生碰撞
        if (IsCollision(newHead)) {
            gameOver = true;
            return;
        }

        // 检查是否吃到食物
        if (newHead.x == food.x && newHead.y == food.y) {
            SetupFood(); // 生成新食物
            score += 10; // 增加得分
            level = score / 50 + 1; // 根据得分更新等级，每50分升一级
        }
        else {
            // 移动蛇身，去掉尾部
            snake.pop_back();
        }

        // 添加新的头部
        snake.insert(snake.begin(), newHead);
    }
	//画出游戏界面
    void Draw() {
        // 使用Windows API清屏
        HANDLE hOut;
        COORD Position;

        hOut = GetStdHandle(STD_OUTPUT_HANDLE);
        Position.X = 0;
        Position.Y = 0;
        SetConsoleCursorPosition(hOut, Position);

        // 打印顶部边界
        for (int j = 0; j < WIDTH + 1; j++) {
            cout << "#" << ' ';
        }
        cout << endl;

        for (int i = 0; i < HEIGHT; i++) {
            for (int j = 0; j < WIDTH; j++) {
                if (j == 0) {
                    // 打印左边界
                    cout << "#";
                }

                bool isSnake = false;
                for (const auto& pos : snake) {
                    if (pos.x == j && pos.y == i) {
                        cout << SNAKE;
                        isSnake = true;
                        break;
                    }
                }

                if (!isSnake) {
                    if (i == food.y && j == food.x)
                        cout << FOOD;
                    else
                        cout << EMPTY;
                }

                // 每打印完一个字符后，如果不是最后一个字符，则打印空格
                if (j < WIDTH - 1)
                    cout << " ";

                if (j == WIDTH - 1) {
                    // 打印右边界
                    cout << "#";
                }
            }
            cout << endl; // 每打印完一行后换行
        }

        // 打印底部边界
        for (int j = 0; j < WIDTH + 1; j++) {
            cout << "#" << ' ';
        }
        cout << endl;

        // 显示当前得分和等级
        cout << "Score: " << score << "  Level: " << level << endl;

        // 如果游戏暂停，显示暂停信息
        if (paused) {
            cout << "Game Paused. Press 'p' to resume." << endl;
        }
    }


    // 切换暂停状态
    void TogglePause() {
        paused = !paused;
    }
};

int main() {
    srand(time(0)); // 初始化随机数生成器
    SnakeGame game;
    cout << "使用 'W','A','S','D'来控制蛇的移动（大小写都行）, 'P' 暂停, 'Q' 停止游戏（一定要把键盘转为英语输入）" << endl;
	cout << "每吃到一个食物得10分，每50分升一级" << endl;
	cout << "游戏等级越高，蛇移动速度越快" << endl;
    cout << "按任意键开始..." << endl;
    _getch(); // 等待用户按键
    while (!game.gameOver) {
        if (_kbhit()) { // 检查是否有键盘输入
            switch (_getch()) {
            case 'a':
            case 'A': game.ChangeDirection(LEFT); break;
            case 'd':
            case 'D': game.ChangeDirection(RIGHT); break;
            case 'w':
            case 'W': game.ChangeDirection(UP); break;
            case 's':
            case 'S': game.ChangeDirection(DOWN); break;
            case 'p':
            case 'P': game.TogglePause(); break; // 切换暂停状态
            case 'q':
            case 'Q': game.gameOver = true; break; // 退出游戏
            }
        }

        if (!game.paused) {
            game.Move(); // 移动蛇
        }
        game.Draw(); // 绘制游戏界面

        // 根据等级调整速度
        int sleepTime = 200 - (game.level - 1) * 20;
        if (sleepTime < 50) sleepTime = 50; // 设置最小等待时间
        Sleep(sleepTime); // 等待一段时间，减少CPU占用并"控制游戏速度"
    }

    cout << "Game Over!" << endl;
	Sleep(2000); // 等待2秒
    return 0;
}
